package ir.bank.domain.bankTransaction;

import ir.bank.domain.account.Account;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.List;


@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "bank_transaction")
public class BankTransaction implements Serializable {


    @Id // this field value will be generated by hibernate sequence
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "from_account_number")
    private Integer fromAccountNumber;
    @Column(name = "to_account_number")
    private Integer toAccountNumber;
    @Column(name = "transfer_amount_money")
    private Integer transferAmountMoney;
    @Column(name = "deposit_amount_money")
    private Integer depositAmountMoney;
    @Column(name = "withdraw_amount_money")
    private Integer withdrawAmountMoney;
    @DateTimeFormat(pattern = "yyyy-MM -dd hh:mm:ss")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    @Column(name = "transaction_date")
    private Date transactionDate;


    @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @OneToMany(fetch = FetchType.EAGER)
    private List<Account> accounts;


    // setting bank transaction properties from bank transaction output class
    public BankTransactionOutput toDto() {
        BankTransactionOutput output = new BankTransactionOutput();
        output.setFromAccountNumber(fromAccountNumber);
        output.setToAccountNumber(toAccountNumber);
        output.setTransferAmountMoney(transferAmountMoney);
        output.setDepositAmountMoney(depositAmountMoney);
        output.setWithdrawAmountMoney(withdrawAmountMoney);
        output.setTransactionDate(transactionDate);
        return output;
    }


    // setting bank transaction properties from bank transaction input class
    public BankTransaction fromDto(BankTransactionInput input) {
        BankTransaction bankTransaction = new BankTransaction();
        bankTransaction.setFromAccountNumber(input.getFromAccountNumber());
        bankTransaction.setToAccountNumber(input.getToAccountNumber());
        bankTransaction.setTransferAmountMoney(input.getTransferAmountMoney());
        bankTransaction.setDepositAmountMoney(input.getDepositAmountMoney());
        bankTransaction.setWithdrawAmountMoney(input.getWithdrawAmountMoney());
        bankTransaction.setTransactionDate(input.getTransactionDate());
        return bankTransaction;
    }
}
